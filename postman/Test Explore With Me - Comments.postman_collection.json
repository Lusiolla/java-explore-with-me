{
	"info": {
		"_postman_id": "c62da0c2-b9d5-4158-9cce-71c85c0c8007",
		"name": "Test Explore With Me - Comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20927538"
	},
	"item": [
		{
			"name": "Подтверждение чужой заявки на участие в событии текущего пользователя Copy",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        let eventBody = rnd.getEvent(category.id);\r",
							"        eventBody['requestModeration'] = true\r",
							"        let event = await api.addEvent(user.id, eventBody);\r",
							"        event = await api.publishEvent(event.id);\r",
							"        const submittedUser = await api.addUser(rnd.getUser());\r",
							"        const requestToJoin = await api.publishParticipationRequest(event.id, submittedUser.id);\r",
							"        pm.collectionVariables.set('response', requestToJoin);\r",
							"        pm.collectionVariables.set('uid', user.id);\r",
							"        pm.collectionVariables.set('eid', event.id);\r",
							"        pm.collectionVariables.set('reqid', requestToJoin.id);\r",
							"\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = pm.collectionVariables.get('response');\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Запрос на участие должен содержать поля: id, requester, event, status, created\", function () {\r",
							"    pm.expect(target).to.have.all.keys('id', 'requester', 'event', 'status', 'created');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(source.id).equal(target.id);\r",
							"    pm.expect(source.requester).equal(target.requester);\r",
							"    pm.expect(source.event).equal(target.event);\r",
							"    pm.expect(source.created).equal(target.created);\r",
							"});\r",
							"\r",
							"pm.test(\"Запрос на участие должен иметь статус PENDING при создании и статус CONFIRMED после выполнения запроса\", function () {\r",
							"    pm.expect(source.status).equal(\"PENDING\");\r",
							"    pm.expect(target.status).equal(\"CONFIRMED\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId/requests/:reqId/confirm",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId",
						"requests",
						":reqId",
						"confirm"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid}}",
							"description": "(Required) id текущего пользователя"
						},
						{
							"key": "eventId",
							"value": "{{eid}}",
							"description": "(Required) id события текущего пользователя"
						},
						{
							"key": "reqId",
							"value": "{{reqid}}",
							"description": "(Required) id заявки, которую подтверждает текущий пользователь"
						}
					]
				},
				"description": "Обратите внимание:\n- нельзя подтвердить заявку, если уже достигнут лимит по заявкам на данное событие\n- если при подтверждении данной заявки, лимит заявок для события исчерпан, то все неподтверждённые заявки необходимо отклонить"
			},
			"response": [
				{
					"name": "Заявка подтверждена",
					"originalRequest": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/requests/:reqId/confirm",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"requests",
								":reqId",
								"confirm"
							],
							"variable": [
								{
									"key": "userId",
									"value": "32652613",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "eventId",
									"value": "32652613",
									"description": "(Required) id события текущего пользователя"
								},
								{
									"key": "reqId",
									"value": "32652613",
									"description": "(Required) id заявки, которую подтверждает текущий пользователь"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"created\": \"1969-01-16T10:39:34.967Z\",\n  \"event\": 1,\n  \"id\": 3,\n  \"requester\": 2,\n  \"status\": \"PENDING\"\n}"
				},
				{
					"name": "Запрос составлен с ошибкой",
					"originalRequest": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/requests/:reqId/confirm",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"requests",
								":reqId",
								"confirm"
							],
							"variable": [
								{
									"key": "userId",
									"value": "32652613",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "eventId",
									"value": "32652613",
									"description": "(Required) id события текущего пользователя"
								},
								{
									"key": "reqId",
									"value": "32652613",
									"description": "(Required) id заявки, которую подтверждает текущий пользователь"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
				},
				{
					"name": "Не выполнены условия для совершения операции",
					"originalRequest": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/requests/:reqId/confirm",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"requests",
								":reqId",
								"confirm"
							],
							"variable": [
								{
									"key": "userId",
									"value": "32652613",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "eventId",
									"value": "32652613",
									"description": "(Required) id события текущего пользователя"
								},
								{
									"key": "reqId",
									"value": "32652613",
									"description": "(Required) id заявки, которую подтверждает текущий пользователь"
								}
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
				},
				{
					"name": "Объект не найден",
					"originalRequest": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/requests/:reqId/confirm",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"requests",
								":reqId",
								"confirm"
							],
							"variable": [
								{
									"key": "userId",
									"value": "32652613",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "eventId",
									"value": "32652613",
									"description": "(Required) id события текущего пользователя"
								},
								{
									"key": "reqId",
									"value": "32652613",
									"description": "(Required) id заявки, которую подтверждает текущий пользователь"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"status\": \"NOT_FOUND\",\n  \"reason\": \"The required object was not found.\",\n  \"message\": \"Event with id=21 was not found.\",\n  \"timestamp\": \"2022-09-07 09:10:50\"\n}"
				},
				{
					"name": "Запрос приводит к нарушению целостности данных",
					"originalRequest": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/requests/:reqId/confirm",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"requests",
								":reqId",
								"confirm"
							],
							"variable": [
								{
									"key": "userId",
									"value": "32652613",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "eventId",
									"value": "32652613",
									"description": "(Required) id события текущего пользователя"
								},
								{
									"key": "reqId",
									"value": "32652613",
									"description": "(Required) id заявки, которую подтверждает текущий пользователь"
								}
							]
						}
					},
					"status": "Conflict",
					"code": 409,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"status\": \"CONFLICT\",\n  \"reason\": \"Integrity constraint has been violated\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:47:58\"\n}"
				},
				{
					"name": "Внутренняя ошибка сервера",
					"originalRequest": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/requests/:reqId/confirm",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"requests",
								":reqId",
								"confirm"
							],
							"variable": [
								{
									"key": "userId",
									"value": "32652613",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "eventId",
									"value": "32652613",
									"description": "(Required) id события текущего пользователя"
								},
								{
									"key": "reqId",
									"value": "32652613",
									"description": "(Required) id заявки, которую подтверждает текущий пользователь"
								}
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"status\": \"INTERNAL_SERVER_ERROR\",\n  \"reason\": \"Error occurred\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:23:27\"\n}"
				}
			]
		},
		{
			"name": "Comment create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
							"    pm.response.to.be.ok;    ",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Событие должно содержать поля: id, authorName, eventId, text, createdOn\", function () {",
							"    pm.expect(target).to.have.all.keys('id', 'authorName', 'eventId', 'text', 'createdOn');",
							"});",
							"",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
							"    pm.expect(target.id).to.not.be.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Sharer-User-Id",
						"value": "1",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "*/*",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"text\": \"Good\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/comments/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "2"
						},
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение полной информации о событии добавленном текущим пользователем Copy 3",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration,comments\", function () {\r",
							"    pm.expect(target).to.have.all.keys('id', 'title', 'annotation', 'category', 'paid', 'eventDate', 'initiator', 'description', 'participantLimit', 'state', 'createdOn', 'location', 'requestModeration', 'comments');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1",
							"description": "(Required) id текущего пользователя"
						},
						{
							"key": "eventId",
							"value": "1",
							"description": "(Required) id события"
						}
					]
				}
			},
			"response": [
				{
					"name": "Событие найдено",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "32652613",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "eventId",
									"value": "32652613",
									"description": "(Required) id события"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"annotation\": \"Эксклюзивность нашего шоу гарантирует привлечение максимальной зрительской аудитории\",\n  \"category\": {\n    \"name\": \"Концерты\",\n    \"id\": 1\n  },\n  \"initiator\": {\n    \"id\": 3,\n    \"name\": \"Фёдоров Матвей\"\n  },\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"title\": \"Знаменитое шоу \\\"Летающая кукуруза\\\"\",\n  \"confirmedRequests\": 5,\n  \"createdOn\": \"yyyy-MM-dd HH:mm:ss\",\n  \"description\": \"Что получится, если соединить кукурузу и полёт? Создатели \\\"Шоу летающей кукурузы\\\" испытали эту идею на практике и воплотили в жизнь инновационный проект, предлагающий свежий взгляд на развлечения...\",\n  \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n  \"id\": 1,\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"publishedOn\": \"yyyy-MM-dd HH:mm:ss\",\n  \"requestModeration\": true,\n  \"state\": \"PUBLISHED\",\n  \"views\": 999\n}"
				},
				{
					"name": "Запрос составлен с ошибкой",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "32652613",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "eventId",
									"value": "32652613",
									"description": "(Required) id события"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
				},
				{
					"name": "Не выполнены условия для совершения операции",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "32652613",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "eventId",
									"value": "32652613",
									"description": "(Required) id события"
								}
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
				},
				{
					"name": "Объект не найден",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "32652613",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "eventId",
									"value": "32652613",
									"description": "(Required) id события"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"status\": \"NOT_FOUND\",\n  \"reason\": \"The required object was not found.\",\n  \"message\": \"Event with id=21 was not found.\",\n  \"timestamp\": \"2022-09-07 09:10:50\"\n}"
				},
				{
					"name": "Запрос приводит к нарушению целостности данных",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "32652613",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "eventId",
									"value": "32652613",
									"description": "(Required) id события"
								}
							]
						}
					},
					"status": "Conflict",
					"code": 409,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"status\": \"CONFLICT\",\n  \"reason\": \"Integrity constraint has been violated\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:47:58\"\n}"
				},
				{
					"name": "Внутренняя ошибка сервера",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "32652613",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "eventId",
									"value": "32652613",
									"description": "(Required) id события"
								}
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"status\": \"INTERNAL_SERVER_ERROR\",\n  \"reason\": \"Error occurred\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:23:27\"\n}"
				}
			]
		},
		{
			"name": "Публикация комментария",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, authorName, eventId, text, createdOn, state,publishedOn\", function () {\r",
							"    pm.expect(target).to.have.all.keys('id', 'authorName', 'eventId', 'text', 'createdOn', 'state', 'publishedOn');\r",
							"});\r",
							"\r",
							"pm.test(\"Комментарий должен иметь статус PUBLISHED после выполнения запроса\", function () {\r",
							"    pm.expect(target.state).equal(\"PUBLISHED\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/admin/comments/:commentId/events/:eventId/publish",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"comments",
						":commentId",
						"events",
						":eventId",
						"publish"
					],
					"variable": [
						{
							"key": "commentId",
							"value": "1"
						},
						{
							"key": "eventId",
							"value": "1"
						}
					]
				},
				"description": "Обратите внимание:\n- нельзя подтвердить заявку, если уже достигнут лимит по заявкам на данное событие\n- если при подтверждении данной заявки, лимит заявок для события исчерпан, то все неподтверждённые заявки необходимо отклонить"
			},
			"response": [
				{
					"name": "Заявка подтверждена",
					"originalRequest": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/requests/:reqId/confirm",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"requests",
								":reqId",
								"confirm"
							],
							"variable": [
								{
									"key": "userId",
									"value": "32652613",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "eventId",
									"value": "32652613",
									"description": "(Required) id события текущего пользователя"
								},
								{
									"key": "reqId",
									"value": "32652613",
									"description": "(Required) id заявки, которую подтверждает текущий пользователь"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"created\": \"1969-01-16T10:39:34.967Z\",\n  \"event\": 1,\n  \"id\": 3,\n  \"requester\": 2,\n  \"status\": \"PENDING\"\n}"
				},
				{
					"name": "Запрос составлен с ошибкой",
					"originalRequest": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/requests/:reqId/confirm",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"requests",
								":reqId",
								"confirm"
							],
							"variable": [
								{
									"key": "userId",
									"value": "32652613",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "eventId",
									"value": "32652613",
									"description": "(Required) id события текущего пользователя"
								},
								{
									"key": "reqId",
									"value": "32652613",
									"description": "(Required) id заявки, которую подтверждает текущий пользователь"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
				},
				{
					"name": "Не выполнены условия для совершения операции",
					"originalRequest": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/requests/:reqId/confirm",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"requests",
								":reqId",
								"confirm"
							],
							"variable": [
								{
									"key": "userId",
									"value": "32652613",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "eventId",
									"value": "32652613",
									"description": "(Required) id события текущего пользователя"
								},
								{
									"key": "reqId",
									"value": "32652613",
									"description": "(Required) id заявки, которую подтверждает текущий пользователь"
								}
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
				},
				{
					"name": "Объект не найден",
					"originalRequest": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/requests/:reqId/confirm",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"requests",
								":reqId",
								"confirm"
							],
							"variable": [
								{
									"key": "userId",
									"value": "32652613",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "eventId",
									"value": "32652613",
									"description": "(Required) id события текущего пользователя"
								},
								{
									"key": "reqId",
									"value": "32652613",
									"description": "(Required) id заявки, которую подтверждает текущий пользователь"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"status\": \"NOT_FOUND\",\n  \"reason\": \"The required object was not found.\",\n  \"message\": \"Event with id=21 was not found.\",\n  \"timestamp\": \"2022-09-07 09:10:50\"\n}"
				},
				{
					"name": "Запрос приводит к нарушению целостности данных",
					"originalRequest": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/requests/:reqId/confirm",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"requests",
								":reqId",
								"confirm"
							],
							"variable": [
								{
									"key": "userId",
									"value": "32652613",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "eventId",
									"value": "32652613",
									"description": "(Required) id события текущего пользователя"
								},
								{
									"key": "reqId",
									"value": "32652613",
									"description": "(Required) id заявки, которую подтверждает текущий пользователь"
								}
							]
						}
					},
					"status": "Conflict",
					"code": 409,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"status\": \"CONFLICT\",\n  \"reason\": \"Integrity constraint has been violated\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:47:58\"\n}"
				},
				{
					"name": "Внутренняя ошибка сервера",
					"originalRequest": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/requests/:reqId/confirm",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"requests",
								":reqId",
								"confirm"
							],
							"variable": [
								{
									"key": "userId",
									"value": "32652613",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "eventId",
									"value": "32652613",
									"description": "(Required) id события текущего пользователя"
								},
								{
									"key": "reqId",
									"value": "32652613",
									"description": "(Required) id заявки, которую подтверждает текущий пользователь"
								}
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"status\": \"INTERNAL_SERVER_ERROR\",\n  \"reason\": \"Error occurred\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:23:27\"\n}"
				}
			]
		},
		{
			"name": "Получение полной информации о событии добавленном текущим пользователем Copy 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration,comments\", function () {\r",
							"    pm.expect(target).to.have.all.keys('id', 'title', 'annotation', 'category', 'paid', 'eventDate', 'initiator', 'description', 'participantLimit', 'state', 'createdOn', 'location', 'requestModeration', 'comments');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1",
							"description": "(Required) id текущего пользователя"
						},
						{
							"key": "eventId",
							"value": "1",
							"description": "(Required) id события"
						}
					]
				}
			},
			"response": [
				{
					"name": "Событие найдено",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "32652613",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "eventId",
									"value": "32652613",
									"description": "(Required) id события"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"annotation\": \"Эксклюзивность нашего шоу гарантирует привлечение максимальной зрительской аудитории\",\n  \"category\": {\n    \"name\": \"Концерты\",\n    \"id\": 1\n  },\n  \"initiator\": {\n    \"id\": 3,\n    \"name\": \"Фёдоров Матвей\"\n  },\n  \"location\": {\n    \"lat\": 55.754167,\n    \"lon\": 37.62\n  },\n  \"title\": \"Знаменитое шоу \\\"Летающая кукуруза\\\"\",\n  \"confirmedRequests\": 5,\n  \"createdOn\": \"yyyy-MM-dd HH:mm:ss\",\n  \"description\": \"Что получится, если соединить кукурузу и полёт? Создатели \\\"Шоу летающей кукурузы\\\" испытали эту идею на практике и воплотили в жизнь инновационный проект, предлагающий свежий взгляд на развлечения...\",\n  \"eventDate\": \"yyyy-MM-dd HH:mm:ss\",\n  \"id\": 1,\n  \"paid\": true,\n  \"participantLimit\": 10,\n  \"publishedOn\": \"yyyy-MM-dd HH:mm:ss\",\n  \"requestModeration\": true,\n  \"state\": \"PUBLISHED\",\n  \"views\": 999\n}"
				},
				{
					"name": "Запрос составлен с ошибкой",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "32652613",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "eventId",
									"value": "32652613",
									"description": "(Required) id события"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
				},
				{
					"name": "Не выполнены условия для совершения операции",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "32652613",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "eventId",
									"value": "32652613",
									"description": "(Required) id события"
								}
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"message\": \"Only pending or canceled events can be changed\",\n  \"reason\": \"For the requested operation the conditions are not met.\",\n  \"status\": \"400 BAD_REQUEST\",\n  \"timestamp\": \"yyyy-MM-dd HH:mm:ss\"\n}"
				},
				{
					"name": "Объект не найден",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "32652613",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "eventId",
									"value": "32652613",
									"description": "(Required) id события"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"status\": \"NOT_FOUND\",\n  \"reason\": \"The required object was not found.\",\n  \"message\": \"Event with id=21 was not found.\",\n  \"timestamp\": \"2022-09-07 09:10:50\"\n}"
				},
				{
					"name": "Запрос приводит к нарушению целостности данных",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "32652613",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "eventId",
									"value": "32652613",
									"description": "(Required) id события"
								}
							]
						}
					},
					"status": "Conflict",
					"code": 409,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"status\": \"CONFLICT\",\n  \"reason\": \"Integrity constraint has been violated\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:47:58\"\n}"
				},
				{
					"name": "Внутренняя ошибка сервера",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "32652613",
									"description": "(Required) id текущего пользователя"
								},
								{
									"key": "eventId",
									"value": "32652613",
									"description": "(Required) id события"
								}
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"status\": \"INTERNAL_SERVER_ERROR\",\n  \"reason\": \"Error occurred\",\n  \"message\": \"could not execute statement; SQL [n/a]; constraint [uq_category_name]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement\",\n  \"timestamp\": \"2022-09-07 10:23:27\"\n}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId + '/publish', \"Ошибка при публикации события\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/' + reqId + '/confirm', \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findCompilation(compId, verbose=null) {",
					"        return this.get('/compilations/' + compId, \"Ошибка при поиске подборки по id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText);",
					"    }",
					"",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"",
					"                    resolve(response.json());",
					"                });",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: pm.variables.replaceIn('{{$randomInt}}'),",
					"                lon: pm.variables.replaceIn('{{$randomInt}}'),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "usersCount",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "request_body",
			"value": ""
		},
		{
			"key": "mail",
			"value": ""
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "uid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catname",
			"value": ""
		},
		{
			"key": "eid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "compid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "toCheck",
			"value": ""
		},
		{
			"key": "newDataToSet",
			"value": ""
		},
		{
			"key": "uid1",
			"value": ""
		},
		{
			"key": "reqid",
			"value": 1,
			"type": "number"
		}
	]
}